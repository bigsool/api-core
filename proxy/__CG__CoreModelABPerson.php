<?php

namespace DoctrineProxies\__CG__\Core\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ABPerson extends \Core\Model\ABPerson implements \Doctrine\ORM\Proxy\Proxy {

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();

    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct ($initializer = NULL, $cloner = NULL) {

        $this->__initializer__ = $initializer;
        $this->__cloner__ = $cloner;
    }

    /**
     *
     * @return array
     */
    public function __sleep () {

        if ($this->__isInitialized__) {
            return array('__isInitialized__',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'id',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'lastName',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'firstName',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'title',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abcompanyContact',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abpersonContact',
                         '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abcompany'
            );
        }

        return array('__isInitialized__',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'id',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'lastName',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'firstName',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'title',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abcompanyContact',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abpersonContact',
                     '' . "\0" . 'Core\\Model\\ABPerson' . "\0" . 'abcompany'
        );
    }

    /**
     *
     */
    public function __wakeup () {

        if (!$this->__isInitialized__) {
            $this->__initializer__ = function (ABPerson $proxy) {

                $proxy->__setInitializer(NULL);
                $proxy->__setCloner(NULL);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if (!array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     *
     */
    public function __clone () {

        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner () {

        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner (\Closure $cloner = NULL) {

        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer () {

        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer (\Closure $initializer = NULL) {

        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties () {

        return self::$lazyPropertiesDefaults;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized () {

        return $this->__isInitialized__;
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized ($initialized) {

        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     */
    public function addAbcompanyContact (\Core\Model\ABCompanyContact $abcompanyContact) {

        $this->__initializer__
        && $this->__initializer__->__invoke($this, 'addAbcompanyContact', array($abcompanyContact));

        return parent::addAbcompanyContact($abcompanyContact);
    }

    /**
     * {@inheritDoc}
     */
    public function addAbpersonContact (\Core\Model\ABPersonContact $abpersonContact) {

        $this->__initializer__
        && $this->__initializer__->__invoke($this, 'addAbpersonContact', array($abpersonContact));

        return parent::addAbpersonContact($abpersonContact);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbcompany () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbcompany', array());

        return parent::getAbcompany();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbcompanyContact () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbcompanyContact', array());

        return parent::getAbcompanyContact();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbpersonContact () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbpersonContact', array());

        return parent::getAbpersonContact();
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', array());

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function getId () {

        if ($this->__isInitialized__ === false) {
            return (int)parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', array());

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle () {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function removeAbcompanyContact (\Core\Model\ABCompanyContact $abcompanyContact) {

        $this->__initializer__
        && $this->__initializer__->__invoke($this, 'removeAbcompanyContact', array($abcompanyContact));

        return parent::removeAbcompanyContact($abcompanyContact);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAbpersonContact (\Core\Model\ABPersonContact $abpersonContact) {

        $this->__initializer__
        && $this->__initializer__->__invoke($this, 'removeAbpersonContact', array($abpersonContact));

        return parent::removeAbpersonContact($abpersonContact);
    }

    /**
     * {@inheritDoc}
     */
    public function setAbcompany (\Core\Model\ABCompany $abcompany = NULL) {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbcompany', array($abcompany));

        return parent::setAbcompany($abcompany);
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName ($firstName) {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', array($firstName));

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName ($lastName) {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', array($lastName));

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle ($title) {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

}
