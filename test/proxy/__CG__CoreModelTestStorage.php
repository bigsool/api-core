<?php

namespace DoctrineProxies\__CG__\Core\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TestStorage extends \Core\Model\TestStorage implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'id', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'url', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'login', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'password', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'usedSpace', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'lastUsedSpaceUpdate', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'isOutOfQuota', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'company', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'companyRestrictedId', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'user', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'userRestrictedId');
        }

        return array('__isInitialized__', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'id', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'url', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'login', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'password', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'usedSpace', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'lastUsedSpaceUpdate', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'isOutOfQuota', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'company', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'companyRestrictedId', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'user', '' . "\0" . 'Core\\Model\\TestStorage' . "\0" . 'userRestrictedId');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TestStorage $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogin($login)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogin', array($login));

        return parent::setLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogin', array());

        return parent::getLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsedSpace($usedSpace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsedSpace', array($usedSpace));

        return parent::setUsedSpace($usedSpace);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsedSpace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsedSpace', array());

        return parent::getUsedSpace();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastUsedSpaceUpdate($lastUsedSpaceUpdate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastUsedSpaceUpdate', array($lastUsedSpaceUpdate));

        return parent::setLastUsedSpaceUpdate($lastUsedSpaceUpdate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastUsedSpaceUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastUsedSpaceUpdate', array());

        return parent::getLastUsedSpaceUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOutOfQuota($isOutOfQuota)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOutOfQuota', array($isOutOfQuota));

        return parent::setIsOutOfQuota($isOutOfQuota);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsOutOfQuota()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsOutOfQuota', array());

        return parent::getIsOutOfQuota();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompany(\Core\Model\TestCompany $company = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompany', array($company));

        return parent::setCompany($company);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompany', array());

        return parent::getCompany();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnrestrictedCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnrestrictedCompany', array());

        return parent::getUnrestrictedCompany();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Core\Model\TestUser $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnrestrictedUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnrestrictedUser', array());

        return parent::getUnrestrictedUser();
    }

}
